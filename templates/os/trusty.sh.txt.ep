#!/bin/bash

failed()
{
  sleep 2 # Wait for the kernel to stop whining
  echo "Hrm, that didn't work.  Calling for help."
  if [ -e /dev/ipmi0 ]; then sudo ipmitool chassis identify force; fi
  echo "OS Install failed: ${1}"
  while [ 1 ]; do sleep 10; done
  exit 1;
}

# import nephologyrc
source /tmp/nephologyrc

# set defaults
BOOT_DISK="${BOOT_DISK:-/dev/sda}"
RAID_DISKS="${RAID_DISKS:-$BOOT_DISK}"
PART_PREFIX="${PART_PREFIX:-}"
IP="<%= $db_node_info->{'primary_ip'} %>"
DOMAIN="<%= $domain %>"

# set hostname to mac address unless exists
<% if (stash->{'db_node_info'}->{'hostname'}) { %>
HOSTNAME=<%= $db_node_info->{'hostname'} %>
<% } else { %>
HOSTNAME=$(echo  <%= $db_node_info->{'boot_mac'} %> |sed 's/:/-/g')
<% } %>

# check for vda and use it
if [ -b "/dev/vda" ]; then
  BOOT_DISK="/dev/vda"
fi

# create target and mount boot disk
mkdir /target
mount ${BOOT_DISK}${PART_PREFIX}1 /target -t xfs
mkdir /target/var
mount ${BOOT_DISK}${PART_PREFIX}3 /target/var -t xfs

echo "Starting debootstrap"
INCLUDE_PACKAGES="openssh-server,linux-image-generic,xfsprogs,wget,ifenslave,curl,grub-pc,mdadm"
debootstrap --include=$INCLUDE_PACKAGES --arch=amd64 trusty /target http://<%= $srv_addr %>:3142/<%= $mirror_addr %>/ubuntu/ || failed "Unable to debootstrap"

mount -o bind /proc /target/proc
mount -o bind /dev /target/dev
mount -o bind /sys /target/sys
mount -o bind /dev/pts /target/dev/pts

# Add fstab
cat > /target/etc/fstab <<EOF
# /etc/fstab: static file system information.
#
# Use 'blkid -o value -s UUID' to print the universally unique identifier
# for a device; this may be used with UUID= as a more robust way to name
# devices that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>                               <dump>  <pass>
proc            /proc           proc    nodev,noexec,nosuid                     0       0
${BOOT_DISK}${PART_PREFIX}1       /               xfs     defaults,noatime                        0       0
${BOOT_DISK}${PART_PREFIX}2       swap            swap    defaults                                0       0
${BOOT_DISK}${PART_PREFIX}3       /var        xfs     defaults,noatime,nodev,nosuid           0       0
EOF

if [ -e "/tmp/mdadm.conf" ]; then
	cp /tmp/mdadm.conf /target/etc/mdadm/
fi

# Set the hostname
echo "Setup hostname and DNS..."
cat > /target/etc/hostname << EOF
$HOSTNAME
EOF

cat > /target/etc/hosts <<EOF
127.0.0.1       localhost
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
$IP $HOSTNAME.$DOMAIN $HOSTNAME

EOF

if [ -L /target/etc/resolv.conf ]; then rm /target/etc/resolv.conf; fi
cat > /etc/resolv.conf <<EOF
search $DOMAIN
nameserver <%= $dns_server %>
EOF

# Setup Ubuntu repos
echo "Installing sources.list"
cat > /target/etc/apt/sources.list <<EOF
deb http://<%= $mirror_addr %>/ubuntu trusty main universe restricted
deb http://<%= $mirror_addr %>/ubuntu trusty-security main universe restricted
EOF

# temporary, install.sh removes
cat > /target/etc/apt/apt.conf.d/99proxy.conf <<EOF
Acquire::http::Proxy "http://<%= $srv_addr %>:3142/";
EOF

cat > /target/etc/network/interfaces <<EOF
auto eth0
iface eth0 inet dhcp
EOF

cat > /target/tmp/install.sh <<EOF
# set mounts and fix locales
grep -v rootfs /proc/mounts > /etc/mtab
locale-gen en_US.UTF-8

# make grub work with raid
# https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/1274320
sed -i 's/quick_boot="1"/quick_boot="0"/g' /etc/grub.d/00_header

#create bootstrap user and unset root's password
passwd -d root
useradd -m bootstrap -d /home/bootstrap -s /bin/bash -G sudo
mkdir /home/bootstrap/.ssh
sed -i '/\%sudo/c\%sudo\tALL=(ALL) NOPASSWD:ALL' /etc/sudoers

# upgrade packages
export DEBIAN_FRONTEND=noninteractive
apt-get update
apt-get -fy upgrade

# setup grup
update-grub
# install grub
for disk in ${RAID_DISKS}; do
	grub-install \$disk || (echo "failed to install grub on \$disk" ; exit 1)
done
EOF

echo "running install.sh"
chroot /target /bin/bash /tmp/install.sh

echo "install ssh key for bootstrap user"
cat > /target/home/bootstrap/.ssh/authorized_keys <<EOF
<%= $pub_ssh_key %>
EOF

# remove apt proxy
rm /target/etc/apt/apt.conf.d/99proxy.conf
