#!/bin/bash

failed()
{
  sleep 2 # Wait for the kernel to stop whining
  echo "Hrm, that didn't work.  Calling for help."
  if [ -e /dev/ipmi0 ]; then sudo ipmitool chassis identify force; fi
  echo "OS Install failed: ${1}"
  while [ 1 ]; do sleep 10; done
  exit 1;
}

BOOT_DISK="sda"
if [ -b "/dev/vda" ]; then
  BOOT_DISK="vda"
fi

mkdir /target
mount /dev/${BOOT_DISK}1 /target -t xfs
mkdir /target/var /target/tmp /target/var/tmp
mount /dev/${BOOT_DISK}5 /target/tmp -t xfs
mount /dev/${BOOT_DISK}6 /target/var/tmp -t xfs
mount /dev/${BOOT_DISK}7 /target/var -t xfs

cat > /etc/resolv.conf <<EOF
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

echo "Starting debootstrap"
INCLUDE_PACKAGES="openssh-server,linux-image-generic,xfsprogs,wget,ifenslave,curl,grub-pc"
sudo debootstrap --include=$INCLUDE_PACKAGES --arch=amd64 trusty /target http://<%= $srv_addr %>:3142/<%= $mirror_addr %>/ubuntu/ || failed "Unable to debootstrap"

mount -o bind /proc /target/proc
mount -o bind /dev /target/dev
mount -o bind /sys /target/sys
mount -o bind /dev/pts /target/dev/pts

# Add fstab
cat > /target/etc/fstab <<EOF
# /etc/fstab: static file system information.
#
# Use 'blkid -o value -s UUID' to print the universally unique identifier
# for a device; this may be used with UUID= as a more robust way to name
# devices that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>                               <dump>  <pass>
proc            /proc           proc    nodev,noexec,nosuid                     0       0
/dev/${BOOT_DISK}1       /               xfs     defaults,noatime                        0       1
/dev/${BOOT_DISK}2       swap            swap    defaults                                0       0
/dev/${BOOT_DISK}5       /tmp            xfs     defaults,noatime,nodev,nosuid,noexec    0       1
/dev/${BOOT_DISK}6       /var/tmp        xfs     defaults,noatime,nodev,nosuid           0       1
/dev/${BOOT_DISK}7       /var        xfs     defaults,noatime,nodev,nosuid           0       1
EOF

# Set the hostname
echo "Setup hostname and DNS..."
#echo <%= $db_node_info->{'hostname'} %> > /target/etc/hostname
if [ -L /target/etc/resolv.conf ]; then rm /target/etc/resolv.conf; fi
printf "domain <%= $db_node_info->{'domain'} %>\nsearch <%= $db_node_info->{'domain'} %>\nnameserver 8.8.8.8\nnameserver 8.8.4.4\n" > /target/etc/resolv.conf            
printf "<%= $db_node_info->{'primary_ip'} %> <%= $db_node_info->{'hostname'} %>.<%= $db_node_info->{'domain'} %> <%= $db_node_info->{'hostname'} %>\n" >> /target/etc/hosts
echo "Done!"

# Setup Ubuntu repos
echo "Installing sources.list"
cat > /target/etc/apt/sources.list <<EOF
deb http://<%= $mirror_addr %>/ubuntu trusty main universe restricted
deb http://<%= $mirror_addr %>/ubuntu trusty-security main universe restricted
EOF

# temporary, install.sh removes
cat > /target/etc/apt/apt.conf.d/99proxy.conf <<EOF
Acquire::http::Proxy "http://<%= $srv_addr %>:3142/";
EOF

cat > /target/etc/network/interfaces <<EOF
auto eth0
iface eth0 inet dhcp
EOF

cat > /target/tmp/install.sh <<EOF
#create bootstrap user and unset root's password
passwd -d root
useradd -m bootstrap -d /home/bootstrap -s /bin/bash -G sudo
mkdir /home/bootstrap/.ssh
sed -i '/\%sudo/c\%sudo\tALL=(ALL) NOPASSWD:ALL' /etc/sudoers

# set hostname
hostname <%= $db_node_info->{'hostname'} %>

# upgrade packages
export DEBIAN_FRONTEND=noninteractive
apt-get update
apt-get -fy upgrade

# set mounts and fix locales
grep -v rootfs /proc/mounts > /etc/mtab
sudo locale-gen en_US.UTF-8

# setup grup
update-grub
grub-install /dev/${BOOT_DISK}
EOF

echo "running install.sh"
chroot /target /bin/bash /tmp/install.sh

echo "install ssh key for bootstrap user"
cat > /target/home/bootstrap/.ssh/authorized_keys <<EOF
<%= $pub_ssh_key %>
EOF

# remove apt proxy
rm /target/etc/apt/apt.conf.d/99proxy.conf
